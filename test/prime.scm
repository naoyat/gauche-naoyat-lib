(use gauche.test)
(test-start "prime")

(use naoyat.math)
(test-module 'naoyat.math)
(use naoyat.math.prime)
(test-module 'naoyat.math.prime)

(prepare-primes-until 1000000)

(test-section "prime-until")
(test* "primes until 10" '(2 3 5 7 11 13 17 19 23) (primes-until 25))
(test* "primes until 1000000" 78498 (length (primes-until 1000000)))

(test-section "prime test")
(test* "0" #f (prime? 0))
(test* "1" #f (prime? 1))
(test* "2" #t (prime? 2))
(test* "3" #t (prime? 3))
(test* "4" #f (prime? 4))
(test* "5" #t (prime? 5))
(test* "6" #f (prime? 6))
(test* "7" #t (prime? 7))

(test-section "prime-factors")
(for-each (lambda (n factors)
			(test* (format #f "prime factors of ~d" n) factors (prime-factors n)))
		  (numbers-between 2 20)
		  '(((2 1))
			((3 1))
			((2 2))
			((5 1))
			((2 1) (3 1))
			((7 1))
			((2 3))
			((3 2))
			((2 1) (5 1))
			((11 1))
			((2 2) (3 1))
			((13 1))
			((2 1) (7 1))
			((3 1) (5 1))
			((2 4))
			((17 1))
			((2 1) (3 2))
			((19 1))
			((2 2) (5 1)))
			)
(test* "prime factors of 100" '((2 2) (5 2)) (prime-factors 100))
(test* "prime factors of 13195" '((5 1) (7 1) (13 1) (29 1)) (prime-factors 13195))

(test-section "largest-prime-factor")
(test* "largest prime factor of 13195" 29 (largest-prime-factor 13195))
;(test* "largest prime factor of 600851475143" 6857 (largest-prime-factor 600851475143))

(test-section "nth-prime")
(test* "6th prime" 13 (nth-prime 6))
(test* "10001th prime" 104743 (nth-prime 10001))

(test-section "the-sum-of-the-primes-below-n")
(test* "The sum of the primes below 10" 17 (the-sum-of-the-primes-below-n 10))
;(test* "The sum of the primes below 2000000" 142913828922 (the-sum-of-the-primes-below-n 10))

(test-section "longest-sum-of-consecutive-primes")
(test* "" '(41 (2 3 5 7 11 13) 6)
	   (longest-sum-of-consecutive-primes 100))
(test* "" '(953 (31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127) 21)
	   (longest-sum-of-consecutive-primes 1000))

(test-section "n-digit-primes")
(test* "1-digit" '(2 3 5 7) (n-digit-primes 1))
(test* "2-digit" '(11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97) (n-digit-primes 2))

(test-section "prime-factor-table num")
(test* "0" #u32() (prime-factor-table 0))
(test* "1" #u32() (prime-factor-table 1))
(test* "2" #u32(1) (prime-factor-table 2))
(test* "3" #u32(0 1) (prime-factor-table 3))
(test* "4" #u32(2) (prime-factor-table 4))
(test* "5" #u32(0 0 1) (prime-factor-table 5))
(test* "6" #u32(1 1) (prime-factor-table 6))
(test* "7" #u32(0 0 0 1) (prime-factor-table 7))
(test* "8" #u32(3) (prime-factor-table 8))
(test* "9" #u32(0 2) (prime-factor-table 9))
(test* "10" #u32(1 0 1) (prime-factor-table 10))
(test* "11" #u32(0 0 0 0 1) (prime-factor-table 11))
(test* "12" #u32(2 1) (prime-factor-table 12))
(test* "0,5" #u32(0 0 0 0 0) (prime-factor-table 0 5))
(test* "1,5" #u32(0 0 0 0 0) (prime-factor-table 1 5))
(test* "2,5" #u32(1 0 0 0 0) (prime-factor-table 2 5))
(test* "3,5" #u32(0 1 0 0 0) (prime-factor-table 3 5))
(test* "4,5" #u32(2 0 0 0 0) (prime-factor-table 4 5))

(test-section "Miller-Rabin test")
(test* "0" #f (fast-prime? 0))
(test* "1" #f (fast-prime? 1))
(test* "2" #t (fast-prime? 2))
(test* "3" #t (fast-prime? 3))
(test* "4" #f (fast-prime? 4))
(test* "5" #t (fast-prime? 5))
(test* "6" #f (fast-prime? 6))
(test* "7" #t (fast-prime? 7))
;(test* "Miller-Rabin test *1" #t (<= (miller-rabin-test* 1 100000) 50))
;(test* "Miller-Rabin test *2" #t (<= (miller-rabin-test* 2 100000) 4))
;(test* "Miller-Rabin test *3" #t (<= (miller-rabin-test* 3 100000) 1))
;(test* "Miller-Rabin test *4" #t (<= (miller-rabin-test* 4 100000) 0))
;(test* "Miller-Rabin test *5" #t (<= (miller-rabin-test* 5 100000) 0))

(test-end)
